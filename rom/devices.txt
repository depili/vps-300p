The various devices have been mapped to the CPUs as follows:

- Beeper:
        Maybe rom2 PIO port B bit 0?
- ADC:
        rom2 cpu, IO port 0x09, writing 0xFF triggers conversion, PIO port A bit 7 is ADC conversion ready.
        Data is read by two bytes from port 0x09, left justified 10bits
- ADC mux selection:
        rom2 cpu, IO port 0x08
- Three 8279 keyboard controllers:
        rom2 cpu, IO-ports 0x00-0x05, IRQ lines on PIO port B bits 5-7
        Controller 1 (IO 0x00 and 0x01) probably has all 7-segment displays on it
        Controller 2 gets written into during the lamp test sequence, so it probably has some leds
        Controller 3 isn't written to during the lamp test.
- LCD
        rom1 cpu, PIO ports. PIO port A is the 8 bit data bus, PIO port B bits 0-2 are the control bits
        hitachi protocol.

- Button lamps/leds:
        rom1 CPU has a 74597 parallel in - serial out device connected to IOs 0x00-0x03. It is controlled
        by L5783. This shifts data copied from EA00 shared memory out 0x1B bytes in total.
- 7 segment displays
        rom2 keyboard controller 1. Bytes 0-2 are the frame rate display, with byte 0 being least significant
        digit. Bytes 3-5 are the pattern number with byte 5 being the least significant, so the order is flipped,
        that is japan for you...
        Bits are inverted, with bit 1 meaning the given segment is off.

        Bitmap:
         111
        6   2
        6   2
         777
        5   3
        5   3
         444